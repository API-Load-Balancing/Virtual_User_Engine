/*
 usage:
 var VUE = require('vue');   // constructor method

 // for each virtual user you need
 var myVirtualUser = new VUE( [options] );
 myVirtualUser.runScript(script);

 script: string :  Javascript code as string

 options argument is optinal, you can set the values later by VUE setter methods
 options: {
 beforeRequestMiddlewareList: Array : Array of functions to use as before request middlewares
 requestMiddlewareList: Array : Array of functions to use as request middlewares
 responseMiddlewareList: Array : Array of functions to use as response middlewares
 filteredModuleList:  Array : the list of Node modules restricted/filtered for user script
 allowedModuleList : Array  : External modules provided on server that user script has access to
 timeout:  Integer :  The number of milliseconds user script can run before forcefully terminating the process
 }

 options setter methods:

 setFilteredModuleList(filterList)
 setAllowedModuleList(allowedList)
 addFilteredModule(moduleName)
 removeFilteredModule(moduleName)
 addAllowedModule(moduleName)
 removeAllowedModule(moduleName)
 setTimeout(timeoutMilliseconds)



 The Most Important part is the middlewares for http/https.request/responsex

 On every call to http/https.request , the request_middleware functions will be called
 with an instance of the http.ClientRequest representing the current request

 myVirtualUser.AddRequestMiddleware(func)
 myVirtualUser.removeRequestMiddleware(func)

 Also for the recived response of each sent request, the response_middleware functions
 will be called with the instance of http.ClientRequest to identify the request object
 It is hardly advised to use this procedure instead of setting an on(response) event listener,
 for compatibility with the user_script

 myVirtualUser.AddResponseMiddleware(func)
 myVirtualUser.removeResponseMiddleware(func)

 On Before every call to http/https.request , the Before_request_middleware functions will be called
 with an instance of the User_Options provided for request, these middleware operations will determine
 if to continue to call the http.request or not

 myVirtualUser.AddBeforeRequestMiddleware(func)
 myVirtualUser.removeBeforeRequestMiddleware(func)



 middleware Format:
 boolean  beforeRequestMiddleware(user_options)
 user_options: is the options user script pass to the http.request
 The result determines if to proceed the request operation or cancel it,
 good for security and accounting operations

 requestMiddleware_func(Client_request_obj, user_options)
 Client_request_obj: is the handler returned by http.request, do not change it, just use as readonly
 user_options: is the options user script pass to the http.request

 responseMiddleware_func(Client_request_obj, recived_response)
 Client_request_obj: is the handler returned by http.request, do not change it, just use as readonly
 recived_response: is an instance of http.IncomingMessage recived from request


 */
